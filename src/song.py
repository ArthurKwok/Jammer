import os
import numpy as np
import music21
import attr
from typing import Tuple

@attr.s(kw_only=True)
class Song(object):
    """Settings of a song accompaniment. Contains methods to generate .mma file and midi file.
    """
    name = attr.ib(type=str, default="untitled")
    style = attr.ib(type=str)
    tempo = attr.ib(type=int)
    chord_progression = attr.ib(type=str)

    supported_styles = ["Pop",
                        "Rock",
                        "Jazz",
                        "Funk"]

    #TODO: assign style-related instrument and groove
    #TODO: add song structure(intro, outro, repeat, ...)

    groove = attr.ib(type=str, init=False)

    @style.validator
    def check_style(self, attribute, value):

        if value not in self.supported_styles:
            raise ValueError(f"Unsupported song style: {value}")


    def build_mma(self, mma_path, verbose=False)->str:
        """build mma file from Song class

        return: path of generated .mma file
        """
        if os.path.exists(mma_path) and verbose:
            print("File already exists: {}, overwritting".format(mma_path))

        with open(mma_path, "w") as file:
            # header comments
            file.write("// This file is automatically generated by Song class.\n")
            file.write("// {}\n\n".format(self.name))

            # song information
            file.write(f"Tempo {self.tempo}\n")
            self.groove = "Rhumba"
            file.write(f"Groove {self.groove}\n\n")
            file.write(self.chord_progression)
            file.write("\n")
        
        if verbose:
            print(f"mma file written and saved: {mma_path}")

        return mma_path


    def build_midi(self, mma_path, verbose=False)->str:
        """build midi file from a existing mma file

        return: path of generated .midi file
        """
        stream = os.popen(f"mma {mma_path}")
        output = stream.read()
        if verbose:
            print(output)
        if ("command not found" in output):
            raise SystemError("MMA not installed.")
            return None
        if ("not found" in output):
            raise SystemError(f".mma file not found: {mma_path}")
            return None       
        file_name = output.split(":")[-1].split("/")[-1][:-2]

        return os.path.join(os.path.split(mma_path)[0], file_name)


    def build(self, mma_path, clear_temp=True, verbose=False)->str:
        """directly build midi file from Song class

        return: path of generated .mma(if clear_temp==False) & .midi file
        """
        self.build_mma(mma_path, verbose=verbose)
        midi_path = self.build_midi(mma_path, verbose=verbose)

        if clear_temp:
            os.remove(mma_path)
            if verbose:
                print(f"Removed file: {mma_path}")

        return midi_path        


if __name__ == "__main__":
    my_song = Song(name="my song",
                    style="Jazz",
                    tempo=100,
                    chord_progression="1\tDm7\n2\tG7\n3\tCM7\n4\tCM7")

    # print(my_song.build_midi("/home/jovyan/workspace/MMA-playground/fella1.mma"))

    my_song.build("../test.mma", clear_temp=False, verbose=True)